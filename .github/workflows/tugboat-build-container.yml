name: Tugboat Build Container

on:
  pull_request:
    paths-ignore:
      - 'microsite/**'
jobs:
  pre-container:
    runs-on: ubuntu-latest
    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096
   
    steps:
      - uses: actions/checkout@v2

      # Beginning of yarn setup, keep in sync between all workflows.
      # TODO(Rugvip): move this to composite action once all features we use are supported
      - name: use node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org/ # Needed for auth

      # Cache every node_modules folder inside the monorepo
      - name: cache all node_modules
        id: cache-modules
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          # We use both yarn.lock and package.json as cache keys to ensure that
          # changes to local monorepo packages bust the cache.
          key: ${{ runner.os }}-v14.x-node_modules-${{ hashFiles('yarn.lock', '**/package.json') }}

      # If we get a cache hit for node_modules, there's no need to bring in the global
      # yarn cache or run yarn install, as all dependencies will be installed already.

      - name: find location of global yarn cache
        id: yarn-cache
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: cache global yarn cache
        uses: actions/cache@v2
        if: steps.cache-modules.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: yarn install
        if: steps.cache-modules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      # End of yarn setup

      - name: type checking and declarations
        run: yarn tsc:full
  
      - name: build all packages
        run: yarn build

      - name: bundle example-backend
        run: yarn workspace example-backend backstage-cli backend:bundle

    

     
